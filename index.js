const { 
    Telegraf,
Markup
} = require('telegraf');
    require('dotenv').config()
    const text = require('./const')
// import fs from 'fs-extra'
// import { join } from 'path'


const bot = new Telegraf(process.env.BOT_TOKEN);
bot.start((ctx) => ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}! –î–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã <a href="/go">–Ω–∞–∂–º–∏—Ç–µ /go</a>`));
bot.help((ctx) => ctx.reply(text.commands));
bot.on('sticker', (ctx) => ctx.reply('üëç'));

bot.command('joke', async (ctx) => ctx.replyWithHTML('–ì—Ä–∞–Ω–¥'));


// –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
bot.command('faq', async (ctx) => ctx.replyWithHTML(text.text));

// –ü–æ–¥–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã
bot.command('go', async (ctx) => {
    try {
      await ctx.replyWithHTML('<b>–ö—Ç–æ –≤–∞—à –∫–ª–∏–µ–Ω—Ç?</b>', Markup.inlineKeyboard(
        [
          [Markup.button.callback('–ö–ª–∏–µ–Ω—Ç –§–∏–∑.–ª–∏—Ü–æ (–ò–ü)', 'btn_FL_1'), Markup.button.callback('–ö–ª–∏–µ–Ω—Ç –Æ–õ', 'btn_UL_1')]
        ]
      ))
    } catch (e) {
      console.error(e)
    }
  })

function addActionBot1(id_btn, text) {
// –î–∏–∞–≥—Ä–∞–º–º–∞ –§–ò–ó –õ–ò–¶
    bot.action('btn_FL_1', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–ö–ª–∏–µ–Ω—Ç –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–µ–ª—å—Å–∫–∏–º —Ö–æ–∑—è–π—Å—Ç–≤–æ–º?</b>', Markup.inlineKeyboard(
          [
            [Markup.button.callback('–î–∞', 'btn_FL_2'), Markup.button.callback('–ù–µ—Ç', 'btn_FL_3')]
          ]
        ))
      } catch (e) {
        console.error(e)
      }
    })

    bot.action('btn_FL_2', async (ctx) => {
      try {
        await ctx.answerCbQuery()
        await ctx.replyWithHTML('<b>–ö–ª–∏–µ–Ω—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ê–≥—Ä–æ—Å—Ç–∞—Ä—Ç–∞–ø</b>')
      } catch (e) {
        console.error(e)
      }
    })

    bot.action('btn_FL_3', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–£ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É—â–∏–π –ù–ò–û–ö–†?</b>', Markup.inlineKeyboard(
          [
            [Markup.button.callback('–î–∞', 'btn_FL_4'), Markup.button.callback('–ù–µ—Ç', 'btn_FL_5')]
          ]
        ))
      } catch (e) {
        console.error(e)
      }
    })

    bot.action('btn_FL_4', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –°—Ç–∞—Ä—Ç-1</b>')
      } catch (e) {
        console.error(e)
      }
    })
    
    bot.action('btn_FL_5', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç</b>')
      } catch (e) {
        console.error(e)
      }
    })

// –î–∏–∞–≥—Ä–∞–º–º–∞ –Æ–† –õ–ò–¶

    bot.action('btn_UL_1', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–í—ã—Ä—É—á–∫–∞ –±–æ–ª—å—à–µ 10 –º–ª–Ω —Ä—É–±?</b>', Markup.inlineKeyboard(
          [
            [Markup.button.callback('–î–∞', 'btn_UL_2'), Markup.button.callback('–ù–µ—Ç', 'btn_UL_3')]
          ]
        ))
      } catch (e) {
        console.error(e)
      }
    })

    bot.action('btn_UL_3', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–ö–æ–º–ø–∞–Ω–∏–∏ –±–æ–ª–µ–µ 2 –ª–µ—Ç?</b>', Markup.inlineKeyboard(
          [
            [Markup.button.callback('–î–∞', 'btn_UL_4'), Markup.button.callback('–ù–µ—Ç', 'btn_UL_5')]
          ]
        ))
      } catch (e) {
        console.error(e)
      }
    })

    bot.action('btn_UL_5', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –°—Ç–∞—Ä—Ç-1</b>')
      } catch (e) {
        console.error(e)
      }
    })
     
    bot.action('btn_UL_4', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –∫—Ä–µ–¥–∏—Ç –ú–°–ü –±–∞–Ω–∫–∞</b>')
      } catch (e) {
        console.error(e)
      }
    })
  
    bot.action('btn_UL_2', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–í—ã—Ä—É—á–∫–∞ –±–æ–ª—å—à–µ 30 –º–ª–Ω —Ä—É–±?</b>', Markup.inlineKeyboard(
          [
            [Markup.button.callback('–î–∞', 'btn_UL_6'), Markup.button.callback('–ù–µ—Ç', 'btn_UL_4')]
          ]
        ))
      } catch (e) {
        console.error(e)
      }
    })
  
    bot.action('btn_UL_6', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–ü—Ä–æ–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏?</b>', Markup.inlineKeyboard(
          [
            [Markup.button.callback('–î–∞', 'btn_UL_7'), Markup.button.callback('–ù–µ—Ç', 'btn_UL_4')]
          ]
        ))
      } catch (e) {
        console.error(e)
      }
    })

    bot.action('btn_UL_7', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—É –ù–ò–û–ö–†?</b>', Markup.inlineKeyboard(
          [
            [Markup.button.callback('–î–∞', 'btn_UL_8'), Markup.button.callback('–ù–µ—Ç', 'btn_UL_9')]
          ]
        ))
      } catch (e) {
        console.error(e)
      }
    })

    bot.action('btn_UL_8', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –†–∞–∑–≤–∏—Ç–∏–µ</b>')
      } catch (e) {
        console.error(e)
      }
    })
    
    bot.action('btn_UL_9', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—É–º–º–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–µ 30 –º–ª–Ω —Ä—É–±??</b>', Markup.inlineKeyboard(
          [
            [Markup.button.callback('–î–∞', 'btn_UL_10'), Markup.button.callback('–ù–µ—Ç', 'btn_UL_11')]
          ]
        ))
      } catch (e) {
        console.error(e)
      }
    })

    bot.action('btn_UL_10', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –§–†–ü/–ú–∏–Ω–ø—Ä–æ–º—Ç–æ—Ä–≥ (–µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)</b>')
      } catch (e) {
        console.error(e)
      }
    })
    
    bot.action('btn_UL_11', async (ctx) => {
      try {
        await ctx.replyWithHTML('<b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ö–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</b>')
      } catch (e) {
        console.error(e)
      }
    })
  }


 // –ì—Ä–∞–Ω—Ç–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
 bot.command('info', async (ctx) => {
  try {
    await ctx.replyWithHTML('<b>–£—Å–ª–æ–≤–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –§–°–ò</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°—Ç–∞—Ä—Ç-1', 'btn_i1'), Markup.button.callback('–ö–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', 'btn_i2'), Markup.button.callback('–†–∞–∑–≤–∏—Ç–∏–µ', 'btn_i3')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }
})

function addActionBot(id_btn, exports, preview) {
// –§–°–ò
  bot.action('btn_i1', async (ctx) => {
    try {
      await ctx.answerCbQuery()
      await ctx.replyWithHTML(text.text2)
    } catch (e) {
      console.error(e)
    }
  })

  bot.action('btn_i2', async (ctx) => {
    try {
      await ctx.answerCbQuery()
      await ctx.replyWithHTML(text.text3, {
        disable_web_page_preview: true
      })
    } catch (e) {
      console.error(e)
    }
  })

  bot.action('btn_i3', async (ctx) => {
    try {
      await ctx.answerCbQuery()
      await ctx.replyWithHTML(text.text4)
    } catch (e) {
      console.error(e)
    }
  })

  // –†–§–†–ò–¢
  bot.action('btn_i4', async (ctx) => {
    try {
      await ctx.replyWithHTML(text.text5)
    } catch (e) {
      console.error(e)
    }
  })

  bot.action('btn_i5', async (ctx) => {
    try {
      await ctx.replyWithHTML(text.text6)
    } catch (e) {
      console.error(e)
    }
  })

  bot.action('btn_i6', async (ctx) => {
    try {
      await ctx.replyWithHTML(text.text7)
    } catch (e) {
      console.error(e)
    }
  })

  bot.action('btn_i7', async (ctx) => {
    try {
      await ctx.replyWithHTML(text.text8)
    } catch (e) {
      console.error(e)
    }
  })
}


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
  addActionBot1('tn_FL_1', text)
  addActionBot('btn_2', text.text2, false)
  addActionBot('btn_3', text.text3, false)
  addActionBot('btn_4', text.text4, false)
  addActionBot('btn_3', text.text5, false)
  addActionBot('btn_4', text.text6, false)
  addActionBot('btn_3', text.text7, false)
  addActionBot('btn_4', text.text8, false)


bot.launch();

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
